var port = 5000;
var host = document.location.href.split(":")[0]+":"+document.location.href.split(":")[1];
if(host.includes("localhost")){
	host+=":";
}
var socket = io.connect("/");		
var cookie_user = getCookie('user');
var params = getParameters();
var user = JSON.parse(cookie_user);
var partie_en_cours;
var game = {};
var debut = new Date();
var pause = 1, duree = 10, seconds=duree;
var motP, motsUtilises = [];

console.log(socket);


socket.on('connect', function () {
	console.log("Connexion avec le serveur.");
	socket.emit("connexion json",user);
	document.querySelector("title").innerHTML = "MOLUX - "+user.name;
});

socket.on("message", function (message){
	console.log(message);
})

socket.on('disconnect', function () {
	console.log("Déconnexion avec le serveur.");
});

function accueil(){
	game = {};
	duree = 10;
	$("section").fadeOut();
	$(".page-creation").fadeIn();
	_(".page-partie .niveau-2 .container-niveau-2").innerHTML = "";
	window.location.reload();
}

function fin(){
	console.log(partie_en_cours);
	console.log(game);
	$(".page-jeu").fadeOut();
	$(".page-fin-jeu").fadeIn();
	user.score+=game.score;
	user.niveau = user.score%100;
	setCookie("user", JSON.stringify(user), 10);
	socket.emit("end game", game);
}

socket.on("end game", function (partie){
	if(partie.admin == partie_en_cours.admin){
		let rang = 1;
		partie.classement.forEach(function (user){
			addPersonneClassement(user, rang);
			rang++;
		})
		partie.motsTrouves.forEach(function (mot){
			addMotFin(mot, 'all');
		})
		game.listeMots.forEach(function (mot){
			addMotFin(mot, 'self');
		})
		_("section.page-fin-jeu .corps .right .boutons .btn").setAttribute("onclick", "accueil()");
		partie_en_cours = {};
	}
})

function addPersonneClassement(personne, rangR){
	let userDiv = create("div");
	let rang = create("span");
	let nom = create("span");
	let total = create("span");
	userDiv.setAttribute("class", "user");
	total.setAttribute("class", "points");
	nom.setAttribute("class", "nom");
	rang.setAttribute("class", "num");
	nom.innerHTML = personne.user;
	total.innerHTML = personne.score+ " pts";
	rang.innerHTML = rangR+".";
	userDiv.appendChild(rang)
	userDiv.appendChild(nom)
	userDiv.appendChild(total)
	_(".c-classement").appendChild(userDiv);
}

function addMotFin(mot, place){
	let motDiv = create("div");
	let valeurSpan = create("span");
	motDiv.setAttribute("class", "mot");
	valeurSpan.setAttribute("class", "valeur");
	valeurSpan.innerHTML = mot;
	motDiv.appendChild(valeurSpan);
	_(".page-fin-jeu ."+place).appendChild(motDiv);
}

function creer_partie(){
	_(".create.valid-btn").removeAttribute("onclick");
	_(".create.valid-btn").innerHTML = '<img class="loader" src="Images/eclipse-loader.svg"/>';
	$(".page-creation").fadeOut();
	$(".page-partie").fadeIn();
	//Création de partie
	var partie = {};
	partie.admin = user.pseudo;
	partie.date = new Date();
	socket.emit("creer partie", partie);
}

socket.on("deconnexion", function(){
	document.location.href="accueil.html";
})

socket.on("parties", function (parties){
	var a = 0;
	var b = 0;

	for(var partie in parties){
		if(parties[partie].admin != user.name){
			_(".aucune-partie").style.display = 'none';
			if(parties[partie].etat == 0){
				//etat = 0 signifie la partie est encore disponible
				addPartie(parties[partie]);
			}
		}
		if(parties[partie].listeJoueurs.includes(user.name)){
			partie_en_cours = parties[partie];
			b = 1;
		}
		a++;
	}
	if(a == 0){
		_(".aucune-partie").style.display = 'inline-block';
		document.querySelector(".les-parties").innerHTML = '';	
		$(".page-creation").fadeIn();
		$(".page-partie").fadeOut();
	}
	if(b == 0){
		_(".create.valid-btn").setAttribute("onclick", "creer_partie()");
		_(".create.valid-btn").innerHTML = 'Créer une partie';
		user.etat = 0;
		partie_en_cours = {};
	}
});
	
socket.on("partie rejoint", function (partie){
	if(partie.listeJoueurs.includes(user.name)){
		_(".page-partie .niveau-2 .container-niveau-2").innerHTML = '';
		partie_en_cours = partie;
		console.log(partie_en_cours);
		for(var i=0;i<partie.joueurs.length;i++){
			if(partie.admin == partie.joueurs[i].name && partie.admin == user.name){
			}
			else{
				console.log("Ajout de "+partie.joueurs[i].name);
				addPersonne(partie.joueurs[i]);
			}
		}
	}
})

socket.on("fermer partie", function (partie, utilisateur){
	partie_en_cours = partie;
	user = utilisateur;
	$(".page-creation").fadeIn();
	$(".page-partie").fadeOut();
	_(".create.valid-btn").setAttribute("onclick", "creer_partie()");
	_(".create.valid-btn").innerHTML = 'Créer une partie';
})

socket.on("suppression partie", function (admin){
	if(partie_en_cours){
		if(partie_en_cours.admin == admin){		
			fermer_partie();
			user.etat = 0;
			socket.emit("update user", user);
		}
	}
})

socket.on("partie prete", function (part){
	if(partie_en_cours.admin == part.admin){
		partie_en_cours = part;
		let elt = _(".commencer.inactive");
		elt.removeAttribute("class");
		elt.setAttribute("class", "commencer active");
		elt.setAttribute("onclick", "ready()");
	}
})

function ready(){

	let elt = _(".commencer.active");
	elt.removeAttribute("class");
	elt.setAttribute("class", "commencer inactive");
	_("button.commencer").removeAttribute("onclick");
	_("button.commencer").innerHTML ='<img class="loader" src="Images/eclipse-loader.svg"/>';
	socket.emit("ready");
}

socket.on("partie en cours", function (partie){
	partie_en_cours = partie;
})

socket.on("lancement de la partie", function (partie){
	$(".regles").fadeOut();
	partie_en_cours = partie;
	game.username = user.name;
	game.admin = partie_en_cours.admin;
	game.listeMots = [];
	game.score = 0;
	init();
})


function init(){
	//_(".corps .min-possibilites .valeur").innerHTML = partie_en_cours.lettres.length;
	afficher_lettres(partie_en_cours.lettres);
	pause = 0;
	compteur(duree,".header .temps .valeur");
}

function mix(){
	retirerTout();
	let z = document.querySelector(".page-jeu .niveau-2 .lettres");
	let a = document.querySelectorAll(".page-jeu .niveau-2 .lettres .lettre");
	let b = document.querySelectorAll(".page-jeu .niveau-2 .lettres .lettre .valeur");
	for(let i=0;i<a.length;i++){
		z.removeChild(a[i]);
	}
	a = melange(a);// Melange est dans le fichier script.js
	for(let i=0;i<a.length;i++){
		z.appendChild(a[i]);
	}
}
    
function melange(elt){  
    let longueur = elt.length, i = 0, nouveau = new Array();
    nombre = parseInt((Math.random().toFixed(1) * longueur));
    while(elt[i]){
        while(nouveau[nombre] || nombre < 0|| nombre > longueur-1){
            nombre = parseInt((Math.random().toFixed(1) * longueur));
        }
        console.log("Nombre:"+nombre);
        console.log(nouveau);
        nouveau[nombre] = elt[i];
        i++;
    }
    return nouveau;
}

function useLettre(idlettre){
	_(".niveau-1.proposes .proposition").style.height = "100%";
	_(".niveau-1.proposes .proposition .erreur").style.opacity="0";
	_("#"+idlettre+" .valeur").style.transform = "scale(0)";
	_("#"+idlettre).removeAttribute("onclick");
	var letterSpan = _("#"+idlettre);
	var letter = _("#"+idlettre+" .valeur").innerHTML;
	_(".proposes .proposition .reste .mot").innerHTML += '<span class="lettre" id="'+idlettre+'2" onclick="retirer(\''+idlettre+'\')"><span class="valeur">'+letter+'</span></span>'; 
	
	var a = document.querySelectorAll(".proposes .proposition .reste .mot .lettre .valeur");
	motP = ''; 
	for(let i=0;i<a.length;i++){
		motP += a[i].innerHTML; 
	}
}

function valider_proposition(){

	var a = document.querySelectorAll(".proposes .proposition .reste .mot .lettre .valeur");
	motP = ''; 
	for(let i=0;i<a.length;i++){
		motP += a[i].innerHTML; 
	}
	console.log(motP);
	if(mot_valide(motP) && !motsUtilises.includes(motP)){
		motsUtilises.push(motP);
		game.listeMots.push(motP);
		game.score+=motP.length;
		_(".corps .entete .points .valeur").innerHTML = game.score;
		_(".niveau-1.proposes .proposition").style.height = "0%";
		var divMot = create("div");
		var valeur = create("span");
		divMot.setAttribute("class", "mot");
		valeur.setAttribute("class", "valeur");
		valeur.innerHTML = motP;
		divMot.appendChild(valeur);
		_(".proposes .mots").appendChild(divMot);
		retirerTout();
		motP = '';
	}
	else{
		if(motsUtilises.includes(motP)){
			_(".niveau-1.proposes .proposition .erreur").innerHTML = 'Ce mot a déjà été utilisé.';
			_(".niveau-1.proposes .proposition .erreur").style.opacity = 1;
			_(".niveau-1.proposes .proposition .erreur").style.background = 'mediumvioletred';
		}
		else{
			_(".niveau-1.proposes .proposition .erreur").innerHTML = "Ce mot n'existe pas dans mon dictionnaire.";
			_(".niveau-1.proposes .proposition .erreur").style.background = '#F23F3F';
			_(".niveau-1.proposes .proposition .erreur").style.opacity = 1;
		}
	}
}

function retirer(idlettre){
	_("#"+idlettre+" .valeur").style.transform = "scale(1)";
	_("#"+idlettre).setAttribute("onclick", "useLettre('"+idlettre+"')");
	let elt = _(".lettre#"+idlettre+'2');
	console.log(elt);
	_(".proposes .proposition .reste .mot").removeChild(elt);
	let a = document.querySelectorAll(".proposes .proposition .reste .mot .lettre");
	if(a.length == 0){
		_(".niveau-1.proposes .proposition").style.height = "0%";
	}
}

function retirerTout(){
	let a = document.querySelectorAll(".proposes .proposition .reste .mot .lettre");
	for(let i=0;i<a.length;i++){
		_(".proposes .proposition .reste .mot").removeChild(a[i]);	
	}	
	a = document.querySelectorAll(".page-jeu .niveau-2 .lettres .lettre");
	let b = document.querySelectorAll(".page-jeu .niveau-2 .lettres .lettre .valeur");
	for(let i=0;i<a.length;i++){
		a[i].setAttribute("onclick", "useLettre('"+a[i].id+"')");
		b[i].style.transform = "scale(1)";
	}	
	_(".page-jeu .niveau-1.proposes .proposition").style.height = "0%";

}


function mot_valide(mot){
	let dico = dicoAssocie(mot);
	if(dico.includes(mot)){
		console.log("Ce dictionnaire contient le mot "+mot);
		return true;
	}
	else{
		console.log("Ce dictionnaire ne contient pas le mot "+mot);
		return false;
	}
}

function dicoAssocie(mot){
	let dico = [];
	switch(mot[0]){
		case "B":
			dico = B.split(',');
			break;
		case "C":
			dico = C.split(',');
			break;
		case "D":
			dico = D.split(',');
			break;
		case "F":
			dico = F.split(',');
			break;
		case "G":
			dico = G.split(',');
			break;
		case "H":
			dico = H.split(',');
			break;
		case "J":
			dico = J.split(',');
			break;
		case "K":
			dico = K.split(',');
			break;
		case "L":
			dico = L.split(',');
			break;
		case "M":
			dico = M.split(',');
			break;
		case "N":
			dico = N.split(',');
			break;
		case "P":
			dico = P.split(',');
			break;
		case "Q":
			dico = Q.split(',');
			break;
		case "R":
			dico = R.split(',');
			break;
		case "S":
			dico = S.split(',');
			break;
		case "T":
			dico = T.split(',');
			break;
		case "V":
			dico = V.split(',');
			break;
		case "W":
			dico = W.split(',');
			break;
		case "X":
			dico = X.split(',');
			break;
		case "Y":
			dico = Y.split(',');
			break;
		case "Z":
			dico = Z.split(',');
			break;
		case "A":
			dico = A.split(',');
			break;
		case "E":
			dico = E.split(',');
			break;
		case "O":
			dico = O.split(',');
			break;
		case "I":
			dico = I.split(',');
			break;
		case "U":
			dico = U.split(',');
			break;
		default:
			alert("Erreur dictionnaire");
			break;
	}
	console.log("Dico associé: "+mot[0]);
	console.log("premier mot : "+dico[0]);
	return dico;
}


function afficher_lettres(lettres){
	for(let i=0;i<lettres.length;i++){
		let lettre = lettres[i];
		let container = _(".corps .lettres");
		let lettre_span = create("span");
		let valeur = create("span");
		valeur.setAttribute("class", "valeur");
		valeur.innerHTML = lettre;
		lettre_span.id="lettre"+lettre+i;
		lettre_span.setAttribute("class", "lettre");
		lettre_span.setAttribute("onclick","useLettre('lettre"+lettre+i+"')");
		lettre_span.appendChild(valeur);
		container.appendChild(lettre_span);
	}
}


function compteur(temps, elt){ 
	if(!temps)
		temps = 0;
	if(pause == 0){
		seconds = temps;
		temps--;
	}
	second(seconds, elt);
//	(pas > reponses.length)?document.querySelector(elt).innerHTML = 0: setTimeout(compteur, 905, temps);		
	if (seconds <= 0){
		fin();
		//pas = reponses.length +5 ;
	}
	else{
		setTimeout(compteur, 980, temps, elt);
	}
}

function second(a,elt){
	b = parseInt(a/60);
	if(b == 0)
		document.querySelector(elt).innerHTML = a;
	else{
		a = a - (b * 60); 
		if( a < 10)
			document.querySelector(elt).innerHTML = b + "'0"+a;
		else
			document.querySelector(elt).innerHTML = b + "'"+a;
	}
}

function lancer_partie(){
	//Lancer une partie
	$(".page-jeu").fadeIn();
	$(".page-jeu .regles").fadeIn();
	$(".page-creation").fadeOut();
	$(".page-partie").fadeOut();
	socket.emit("lancer partie", partie_en_cours);

}

socket.on("partie lancee", function (jeu){
	if(jeu.admin == partie_en_cours.admin){
		$(".page-jeu").fadeIn();
		$(".page-jeu .regles").fadeIn();
		$(".page-creation").fadeOut();
		$(".page-partie").fadeOut();
	}
})

function fermer_partie(){
	socket.emit("quitter partie");
}

function addPersonne(personne){
	var personnes= _(".page-partie .niveau-2 .container-niveau-2");
	var cardPartie = create("div");
	if(partie_en_cours.admin == user.name){
		var retirer = create("span");
		retirer.setAttribute("class","retirer");
		retirer.innerHTML = 'Retirer'; 
		cardPartie.appendChild(retirer);
	}
	var nom = create("span");
	var niveau = create("span");
	cardPartie.setAttribute("class","personnal-card");
	nom.setAttribute("class","nom");
	niveau.setAttribute("class","niveau");
	niveau.innerHTML = 'Niveau '+personne.niveau; 
	nom.innerHTML = personne.name; 


	cardPartie.appendChild(nom);
	cardPartie.appendChild(niveau);
	personnes.appendChild(cardPartie);

}

function addPartie(partie){
	if(!document.querySelector("#"+partie.admin)){
		partie.date = new Date(partie.date);
		var jour = partie.date.getDate();
		var mois = partie.date.getMonth();
		var annee = partie.date.getFullYear();
		var heure = partie.date.getHours();
		var minute = partie.date.getMinutes();
		
		var cardPartie = create("div");
		var ligne1 = create("div");
		var ligne2 = create("div");
		var ligne3 = create("div");
		var ligne4 = create("div");
		var hr = create("hr");
		var joindre = create("button");
		var parties = document.querySelector(".les-parties");

		cardPartie.setAttribute("class", "card-partie "+partie.admin);
		cardPartie.setAttribute("id",partie.admin);
		hr.setAttribute("class", "separateur-partie");
		ligne1.setAttribute("class", "ligne-1"); 
		ligne2.setAttribute("class", "ligne-2"); 
		ligne3.setAttribute("class", "ligne-3"); 
		ligne4.setAttribute("class", "ligne-4");
		joindre.setAttribute("class", "valid-btn join");
		joindre.setAttribute("onclick", "partie('"+partie.admin+"')");

		ligne1.innerHTML = 'Partie créée par <b>'+partie.admin+'</b>';
		ligne2.innerHTML = 'le '+((jour<10)?('0'+jour):jour)+'/'+((mois<10)?('0'+(mois+1)):(mois+1))+'/'+annee+' à '+((heure<10)?('0'+heure):heure)+':'+((minute<10)?('0'+minute):minute);
		ligne3.innerHTML = 'Nombre de participants : <b>'+partie.joueurs.length+'</b><br>Niveau Moyen : <b>'+partie.niveau+'</b>';
		joindre.innerHTML = 'REJOINDRE';

		ligne4.appendChild(joindre);
		cardPartie.appendChild(ligne1);
		cardPartie.appendChild(ligne2);
		cardPartie.appendChild(hr);
		cardPartie.appendChild(ligne3);
		cardPartie.appendChild(ligne4);
		parties.appendChild(cardPartie);
	}
}

function partie(admin){
	//Rejoindre la partie de admin
	console.log("Vous avez demandé à rejoindre la partie de "+admin);
	_(".create.valid-btn").removeAttribute("onclick");
	_(".create.valid-btn").innerHTML = '<img class="loader" src="Images/eclipse-loader.svg"/>';
	$(".page-creation").fadeOut();
	$(".page-partie").fadeIn();
	$(".niveau-1.admin").fadeOut();
	socket.emit("joindre partie", admin);
}

function create(elt){
	return document.createElement(elt);
}

function getParameters()
{
	var urlParams,
	match,
	pl = '/+/g', // Regex for replacing addition symbol with a space
	search = /([^&=]+)=?([^&]*)/g,
	decode = function (s) { return decodeURIComponent(s.replace(pl, )); },
	query = window.location.search.substring(1);
	urlParams = {};
	while (match = search.exec(query))
	urlParams[decode(match[1])] = decode(match[2]);
	return urlParams;
}



 document.addEventListener('DOMContentLoaded', function() {
    var elems = document.querySelectorAll('.sidenav');
    var instances = M.Sidenav.init(elems);
  });
// var instance = M.Tabs.init(el);
$(document).ready(function(){
    $('.tabs').tabs();
  });
        
